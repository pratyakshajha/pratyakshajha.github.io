<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>software engineering - Tag - Pratyaksha</title><link>https://pratyakshajha.me/tags/software-engineering/</link><description>software engineering - Tag - Pratyaksha</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>hello@pratyakshajha.me (Pratyaksha Jha)</managingEditor><webMaster>hello@pratyakshajha.me (Pratyaksha Jha)</webMaster><lastBuildDate>Sat, 06 May 2023 12:37:56 +0530</lastBuildDate><atom:link href="https://pratyakshajha.me/tags/software-engineering/" rel="self" type="application/rss+xml"/><item><title>Solid Design Principles</title><link>https://pratyakshajha.me/solid-design-principles/</link><pubDate>Sat, 06 May 2023 12:37:56 +0530</pubDate><author>Pratyaksha Jha</author><guid>https://pratyakshajha.me/solid-design-principles/</guid><description>SOLID is a set design principles in object-oriented context to make maintainable, testable and extendable software.
Single Responsibility A class should only have one responsibility. Furthermore, it should only have one reason to change.
Benefits:
Testing: A class with one responsibility will have far fewer test cases. Lower coupling: Less functionality in a single class will have fewer dependencies. Organization: Smaller, well-organized classes are easier to search than monolithic ones. Example Bad A class representing a book:</description></item></channel></rss>