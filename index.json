[{"categories":["cheatsheets"],"content":"CLI Command Structure: aws \u003ccommand\u003e \u003csubcommand\u003e [options and parameters] aws \u003ccommand\u003e wait \u003csubcommand\u003e [options and parameters] (not supported by all) ","date":"2024-04-26","objectID":"/aws-cli-cheatsheet/:0:0","tags":["aws"],"title":"AWS CLI Cheatsheet","uri":"/aws-cli-cheatsheet/"},{"categories":["cheatsheets"],"content":"Set Up Using long-term credentials with IAM user (Not recommended): aws configure Using short-term credentialswith IAM user: aws configure aws configure set aws_session_token TOKEN # token generated from previous command Using EC2 instance metadata: aws configure set role_arn arn:aws:iam::123456789012:role/defaultrole aws configure set credential_source Ec2InstanceMetadata aws configure set region us-west-2 aws configure set output json Using IAM role: aws configure set role_arn arn:aws:iam::123456789012:role/defaultrole aws configure set source_profile default aws configure set role_session_name session_user1 aws configure set region us-west-2 aws configure set output json Using IAM Identity Center user aws configure sso ","date":"2024-04-26","objectID":"/aws-cli-cheatsheet/:1:0","tags":["aws"],"title":"AWS CLI Cheatsheet","uri":"/aws-cli-cheatsheet/"},{"categories":["cheatsheets"],"content":"Credentials and config files The config and credentials can set in various ways (in order of precedence): Command line options: Such as the --region, --output, and --profile parameters (complete list) Environment variables: Such as AWS_CONFIG_FILE, AWS_SHARED_CREDENTIALS_FILE, AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, and AWS_REGION (complete list) Assume role: Assume the permissions of an IAM role through configuration, web identity or the aws sts assume-role command. aws folder in home directory, %UserProfile% in Windows and $HOME or ~ in Unix (config file settings) More details are at: https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-configure.html ","date":"2024-04-26","objectID":"/aws-cli-cheatsheet/:1:1","tags":["aws"],"title":"AWS CLI Cheatsheet","uri":"/aws-cli-cheatsheet/"},{"categories":["cheatsheets"],"content":"AWS CLI Global Settings ","date":"2024-04-26","objectID":"/aws-cli-cheatsheet/:2:0","tags":["aws"],"title":"AWS CLI Cheatsheet","uri":"/aws-cli-cheatsheet/"},{"categories":["cheatsheets"],"content":"Specifying parameters Simple parameters like strings and numbers can be passed as: aws ec2 create-key-pair --key-name my-key-pair where my-key-pair is a parameter Formats for some other types are: Timestamps: aws ec2 describe-spot-price-history --start-time 2014-10-13T19:00:00Z. Accepatble formats are: YYYY-MM-DDThh:mm:ss.sssTZD (UTC) YYYY-MM-DDThh:mm:ss.sssTZD (with offset) YYYY-MM-DD Unix Epoch time List: aws ec2 describe-spot-price-history --instance-types m1.xlarge m1.medium Boolean: aws ec2 describe-spot-price-history --dry-run Binary flag that turns an option on or off. For example, ec2 describe-spot-price-history has a Boolean –dry-run parameter that, when specified, validates the query with the service without actually running the query. Blob: Specify a path to a local file that contains the binary data using the fileb:// prefix. This is treated as raw unencoded binary and the path is interpreted as being relative to the current working directory. aws kms encrypt \\ --key-id 1234abcd-12ab-34cd-56ef-1234567890ab \\ --plaintext fileb://ExamplePlaintextFile \\ --output text \\ --query CiphertextBlob | base64 \\ --decode \u003e ExampleEncryptedFile Streaming blob: Some parameters do not use the fileb:// prefix. These are re formatted using the direct file path. aws cloudsearchdomain upload-documents \\ --endpoint-url https://doc-my-domain.us-west-1.cloudsearch.amazonaws.com \\ --content-type application/json \\ --documents document-batch.json Map: A set of key-value pairs specified in JSON or by using the CLI’s shorthand syntax. aws dynamodb get-item --table-name my-table --key '{\"id\": {\"N\":\"1\"}}' Document: Document types are used to send data without needing to embed JSON inside strings. This allows for sending JSON data without needing to escape values. Info If any of the string items contain a space, you must put quotation marks around that item. Shorthand Syntax AWS CLI also supports a shorthand syntax that enables a simpler representation of your option parameters than using the full JSON format. It makes it easier for users to input parameters that are flat (non-nested structures). The format is a comma-separated list of key-value pairs. For example: aws dynamodb update-table \\ --provisioned-throughput ReadCapacityUnits=15,WriteCapacityUnits=10 \\ --table-name MyDDBTable This is equivalent to the following example formatted in JSON. aws dynamodb update-table \\ --provisioned-throughput '{\"ReadCapacityUnits\":15,\"WriteCapacityUnits\":10}' \\ --table-name MyDDBTable Shorthand JSON –option key1=value1,key2=value2,key3=value3 –option ‘{“key1”:“value1”,“key2”:“value2”,“key3”:“value3”}β –option value1 value2 value3 –option ‘[value1,value2,value3]β –option Key=My1stTag,Value=Value1 Key=My2ndTag,Value=Value2 Key=My3rdTag,Value=Value3 –option β[{“Key”: “My1stTag”, “Value”: “Value1”}, {“Key”: “My2ndTag”, “Value”: “Value2”}, {“Key”: “My3rdTag”, “Value”: “Value3”}]β Load Parameters from a file Use file://complete/path/to/file to provide a file URL to the parameter. Example: aws ec2 describe-instances --filters file://filter.json ","date":"2024-04-26","objectID":"/aws-cli-cheatsheet/:2:1","tags":["aws"],"title":"AWS CLI Cheatsheet","uri":"/aws-cli-cheatsheet/"},{"categories":["cheatsheets"],"content":"AWS CLI skeletons and input files Most of the AWS CLI commands accept all parameter inputs from a file. These templates can be generated using the generate-cli-skeleton option. After generating a file, modify the parameter as per your requirement. Most of the AWS Command Line Interface (AWS CLI) commands support the ability to accept all parameter inputs from a file using the --cli-input-json and --cli-input-yaml parameters. Use ths parameter and point to the filled-in file from the previous step. ","date":"2024-04-26","objectID":"/aws-cli-cheatsheet/:2:2","tags":["aws"],"title":"AWS CLI Cheatsheet","uri":"/aws-cli-cheatsheet/"},{"categories":["cheatsheets"],"content":"AWS CLI output format The AWS CLI supports the following output formats: json: The output is formatted as a JSON. yaml: The output is formatted as a YAML. yaml-stream: The output is streamed and formatted as a YAML string. Streaming allows for faster handling of large data types. text: The output is formatted as multiple lines of tab-separated string values. The output can be passed to a text processor, like grep. table: The output is formatted as a table using the characters +|- to form the cell borders. This is more readable than other formats. ","date":"2024-04-26","objectID":"/aws-cli-cheatsheet/:2:3","tags":["aws"],"title":"AWS CLI Cheatsheet","uri":"/aws-cli-cheatsheet/"},{"categories":["cheatsheets"],"content":"Pagination Server-side pagination can be used with the help of following options: –no-paginate: Disables pagination (AWS CLI pagnates by default) –page-size: Change default page size –max-items: Change default maximum number of items in a page –starting-token: If total number of items is more than the items in a page (–max-items), then NextToken is also returned. This is passed as a parameter to –starting-token in the next CLI call to fetch the next page aws s3api list-objects \\ --bucket my-bucket \\ --max-items 100 \\ --starting-token eyJNYXJrZXIiOiBudWxsLCAiYm90b190cnVuY2F0ZV9hbW91bnQiOiAxfQ== ","date":"2024-04-26","objectID":"/aws-cli-cheatsheet/:2:4","tags":["aws"],"title":"AWS CLI Cheatsheet","uri":"/aws-cli-cheatsheet/"},{"categories":["cheatsheets"],"content":"AWS CLI Global Options --debug --endpoint-url: Change default URL used by the service --no-verify-ssl --no-paginate: Disable automatic pagination. --output: json/text/table/yaml/yaml stream --query: JMESPath query to filter the response --profile --region --version --color: on/off/auto --no-sign-request: Do not sign requests. Credentials will not be loaded --ca-bundle: The CA certificate bundle to use when verifying SSL certificates. Overrides config/env settings. --cli-read-timeout: The maximum socket read time in seconds. If the value is set to 0, the socket read will be blocking and not timeout. The default value is 60 seconds. --cli-connect-timeout: The maximum socket connect time in seconds. If the value is set to 0, the socket connect will be blocking and not timeout. The default value is 60 seconds. --cli-binary-format: The formatting style to be used for binary blobs. --no-cli-pager --cli-auto-prompt --no-cli-auto-prompt ","date":"2024-04-26","objectID":"/aws-cli-cheatsheet/:2:5","tags":["aws"],"title":"AWS CLI Cheatsheet","uri":"/aws-cli-cheatsheet/"},{"categories":["cheatsheets"],"content":"Filtering the output Server-side filtering Server-side filtering in the AWS CLI is provided by the AWS service API. The parameter names and functions vary between services. Some common parameter names used for filtering are: --filter such as ses and ce. --filters such as ec2, autoscaling, and rds. Names starting with the word filter, for example -filter-expression for the aws dynamodb scan command. Client-side filtering The –query parameter takes the HTTP response that comes back from the server and filters the results before displaying them. Querying uses JMESPath syntax to create expressions for filtering the output. For example, consider the command aws ec2 describe-volumes returns the following output: Output { \"Volumes\": [ { \"AvailabilityZone\": \"us-west-2a\", \"Attachments\": [ { \"AttachTime\": \"2013-09-17T00:55:03.000Z\", \"InstanceId\": \"i-a071c394\", \"VolumeId\": \"vol-e11a5288\", \"State\": \"attached\", \"DeleteOnTermination\": true, \"Device\": \"/dev/sda1\" } ], \"VolumeType\": \"standard\", \"VolumeId\": \"vol-e11a5288\", \"State\": \"in-use\", \"SnapshotId\": \"snap-f23ec1c8\", \"CreateTime\": \"2013-09-17T00:55:03.000Z\", \"Size\": 30 }, { \"AvailabilityZone\": \"us-west-2a\", \"Attachments\": [ { \"AttachTime\": \"2013-09-18T20:26:16.000Z\", \"InstanceId\": \"i-4b41a37c\", \"VolumeId\": \"vol-2e410a47\", \"State\": \"attached\", \"DeleteOnTermination\": true, \"Device\": \"/dev/sda1\" } ], \"VolumeType\": \"standard\", \"VolumeId\": \"vol-2e410a47\", \"State\": \"in-use\", \"SnapshotId\": \"snap-708e8348\", \"CreateTime\": \"2013-09-18T20:26:15.000Z\", \"Size\": 8 }, { \"AvailabilityZone\": \"us-west-2a\", \"Attachments\": [ { \"AttachTime\": \"2020-11-20T19:54:06.000Z\", \"InstanceId\": \"i-1jd73kv8\", \"VolumeId\": \"vol-a1b3c7nd\", \"State\": \"attached\", \"DeleteOnTermination\": true, \"Device\": \"/dev/sda1\" } ], \"VolumeType\": \"standard\", \"VolumeId\": \"vol-a1b3c7nd\", \"State\": \"in-use\", \"SnapshotId\": \"snap-234087fb\", \"CreateTime\": \"2020-11-20T19:54:05.000Z\", \"Size\": 15 } ] } Different ways of filtering it are: To return only the first two volumes aws ec2 describe-volumes --query 'Volumes[0:2:1]' [ { \"AvailabilityZone\": \"us-west-2a\", \"Attachments\": [ { \"AttachTime\": \"2013-09-17T00:55:03.000Z\", \"InstanceId\": \"i-a071c394\", \"VolumeId\": \"vol-e11a5288\", \"State\": \"attached\", \"DeleteOnTermination\": true, \"Device\": \"/dev/sda1\" } ], \"VolumeType\": \"standard\", \"VolumeId\": \"vol-e11a5288\", \"State\": \"in-use\", \"SnapshotId\": \"snap-f23ec1c8\", \"CreateTime\": \"2013-09-17T00:55:03.000Z\", \"Size\": 30 }, { \"AvailabilityZone\": \"us-west-2a\", \"Attachments\": [ { \"AttachTime\": \"2013-09-18T20:26:16.000Z\", \"InstanceId\": \"i-4b41a37c\", \"VolumeId\": \"vol-2e410a47\", \"State\": \"attached\", \"DeleteOnTermination\": true, \"Device\": \"/dev/sda1\" } ], \"VolumeType\": \"standard\", \"VolumeId\": \"vol-2e410a47\", \"State\": \"in-use\", \"SnapshotId\": \"snap-708e8348\", \"CreateTime\": \"2013-09-18T20:26:15.000Z\", \"Size\": 8 } ] To shows all Attachments information for all volumes aws ec2 describe-volumes --query 'Volumes[*].Attachments' [ [ { \"AttachTime\": \"2013-09-17T00:55:03.000Z\", \"InstanceId\": \"i-a071c394\", \"VolumeId\": \"vol-e11a5288\", \"State\": \"attached\", \"DeleteOnTermination\": true, \"Device\": \"/dev/sda1\" } ], [ { \"AttachTime\": \"2013-09-18T20:26:16.000Z\", \"InstanceId\": \"i-4b41a37c\", \"VolumeId\": \"vol-2e410a47\", \"State\": \"attached\", \"DeleteOnTermination\": true, \"Device\": \"/dev/sda1\" } ], [ { \"AttachTime\": \"2020-11-20T19:54:06.000Z\", \"InstanceId\": \"i-1jd73kv8\", \"VolumeId\": \"vol-a1b3c7nd\", \"State\": \"attached\", \"DeleteOnTermination\": true, \"Device\": \"/dev/sda1\" } ] ] To list the State for all Volumes (also flatten the result) aws ec2 describe-volumes --query 'Volumes[*]*.Attachments*[].State' [ \"attached\", \"attached\", \"attached\" ] Filter for the VolumeIds for all Volumes in an AttachedState aws ec2 describe-volumes --query 'Volumes[*].Attachments[?State==attached].VolumeId' [ \"vol-e11a5288\" ], [ \"vol-2e410a47\" ], [ \"vol-a1b3c7nd\" ] To shows first InstanceId in all Attachments information for all volumes aws ec2 describe-volumes --query 'Volumes[*].Attachments[].InstanceId | [0]' \"i-a071c394\"","date":"2024-04-26","objectID":"/aws-cli-cheatsheet/:2:6","tags":["aws"],"title":"AWS CLI Cheatsheet","uri":"/aws-cli-cheatsheet/"},{"categories":["cheatsheets"],"content":"Frequently Used CLI commands ","date":"2024-04-26","objectID":"/aws-cli-cheatsheet/:3:0","tags":["aws"],"title":"AWS CLI Cheatsheet","uri":"/aws-cli-cheatsheet/"},{"categories":["cheatsheets"],"content":"DynamoDB Get Item aws dynamodb get-item \\ --table-name MusicCollection \\ --key file://key.json Contents of key.json: { \"Artist\": {\"S\": \"Acme Band\"}, \"SongTitle\": {\"S\": \"Happy Day\"} } For strongly consistent reads, use --consistent-read Get specific attributes for an item aws dynamodb get-item \\ --table-name ProductCatalog \\ --key '{\"Id\": {\"N\": \"102\"}}' \\ --projection-expression \"Description, RelatedItems[0], ProductReviews.FiveStar\" Batch Get Items aws dynamodb batch-get-item \\ --request-items file://request-items.json \\ --return-consumed-capacity TOTAL Contents of request-items.json: { \"MusicCollection\": { \"Keys\": [ { \"Artist\": {\"S\": \"No One You Know\"}, \"SongTitle\": {\"S\": \"Call Me Today\"} }, { \"Artist\": {\"S\": \"Acme Band\"}, \"SongTitle\": {\"S\": \"Happy Day\"} }, { \"Artist\": {\"S\": \"No One You Know\"}, \"SongTitle\": {\"S\": \"Scared of My Shadow\"} } ], \"ProjectionExpression\":\"AlbumTitle\", \"ConsistentRead\": true } } Gets maximum of 100 items, upto 16 MB of data Use UnprocessedKeys to get next page of results For eventually consistent reads, set ConsistentRead as false or remove it Put an item aws dynamodb put-item \\ --table-name MusicCollection \\ --item file://item.json \\ --return-consumed-capacity TOTAL \\ --return-item-collection-metrics SIZE Contents of item.json: { \"Artist\": {\"S\": \"No One You Know\"}, \"SongTitle\": {\"S\": \"Call Me Today\"}, \"AlbumTitle\": {\"S\": \"Greatest Hits\"} } Will replace an item, if it exists with same primary key Batch write items aws dynamodb batch-write-item \\ --request-items file://request-items.json \\ --return-consumed-capacity INDEXES \\ --return-item-collection-metrics SIZE Contents of request-items.json: { \"MusicCollection\": [ { \"PutRequest\": { \"Item\": { \"Artist\": {\"S\": \"No One You Know\"}, \"SongTitle\": {\"S\": \"Call Me Today\"}, \"AlbumTitle\": {\"S\": \"Somewhat Famous\"} } } }, { \"DeleteRequest\": { \"Key\": { \"Artist\": {\"S\": \"No One You Know\"}, \"SongTitle\": {\"S\": \"Scared of My Shadow\"} } } } ] } Will return maximum of 16MB of data, 400KB per item and up to 25 items per put and delete operation PutRequest will replace an existing item with same primary key Create a backup aws dynamodb create-backup \\ --table-name MusicCollection \\ --backup-name MusicCollectionBackup Delete an item aws dynamodb delete-item \\ --table-name MusicCollection \\ --key '{\"Artist\": {\"S\": \"No One You Know\"}, \"SongTitle\": {\"S\": \"Scared of My Shadow\"}}'\\ --return-values ALL_OLD \\ --return-consumed-capacity TOTAL \\ --return-item-collection-metrics SIZE Delete an item conditionally aws dynamodb delete-item \\ --table-name ProductCatalog \\ --key '{\"Id\":{\"N\":\"456\"}}' \\ --condition-expression \"(ProductCategory IN (:cat1, :cat2)) and (#P between :lo and :hi)\" \\ --expression-attribute-names '{\"#P\": \"Price\"}' \\ --expression-attribute-values file://values.json \\ --return-values ALL_OLD Contents of values.json: { \":cat1\": {\"S\": \"Sporting Goods\"}, \":cat2\": {\"S\": \"Gardening Supplies\"}, \":lo\": {\"N\": \"500\"}, \":hi\": {\"N\": \"600\"} } View provisioned capacity limits aws dynamodb describe-limits Describe a table aws dynamodb describe-table --table-name MusicCollection Output: { \"Table\": { \"AttributeDefinitions\": [ { \"AttributeName\": \"Artist\", \"AttributeType\": \"S\" }, { \"AttributeName\": \"SongTitle\", \"AttributeType\": \"S\" } ], \"ProvisionedThroughput\": { \"NumberOfDecreasesToday\": 0, \"WriteCapacityUnits\": 5, \"ReadCapacityUnits\": 5 }, \"TableSizeBytes\": 0, \"TableName\": \"MusicCollection\", \"TableStatus\": \"ACTIVE\", \"KeySchema\": [ { \"KeyType\": \"HASH\", \"AttributeName\": \"Artist\" }, { \"KeyType\": \"RANGE\", \"AttributeName\": \"SongTitle\" } ], \"ItemCount\": 0, \"CreationDateTime\": 1421866952.062 } } List tables aws dynamodb list-tables List tags aws dynamodb list-tags-of-resource \\ --resource-arn arn:aws:dynamodb:us-west-2:123456789012:table/MusicCollection Query aws dynamodb query \\ --table-name MusicCollection \\ --projection-expression \"SongTitle\" \\ --key-condition-expression \"Artist = :v1\" \\ --expression-attribute-values '{\":v1\": {\"S\": \"No One You Know\"}\"' \\ --return-consumed-capacity TOTAL","date":"2024-04-26","objectID":"/aws-cli-cheatsheet/:3:1","tags":["aws"],"title":"AWS CLI Cheatsheet","uri":"/aws-cli-cheatsheet/"},{"categories":["cheatsheets"],"content":"Lambda Add a permission aws lambda add-permission \\ --function-name my-function \\ --action lambda:InvokeFunction \\ --statement-id sns \\ --principal sns.amazonaws.com Output: { \"Statement\": { \"Sid\":\"sns\", \"Effect\":\"Allow\", \"Principal\":{ \"Service\":\"sns.amazonaws.com\" }, \"Action\":\"lambda:InvokeFunction\", \"Resource\":\"arn:aws:lambda:us-east-2:123456789012:function:my-function\" } } Create a function aws lambda create-function \\ --function-name my-function \\ --runtime nodejs18.x \\ --zip-file fileb://my-function.zip \\ --handler my-function.handler \\ --role arn:aws:iam::123456789012:role/service-role/MyTestFunction-role-tges6bf4 Update function code aws lambda update-function-code \\ --function-name my-function \\ --zip-file fileb://my-function.zip Delete a function aws lambda delete-function \\ --function-name my-function Get function information aws lambda get-function \\ --function-name my-function Output: { \"Concurrency\": { \"ReservedConcurrentExecutions\": 100 }, \"Code\": { \"RepositoryType\": \"S3\", \"Location\": \"https://awslambda-us-west-2-tasks.s3.us-west-2.amazonaws.com/snapshots/123456789012/my-function...\" }, \"Configuration\": { \"TracingConfig\": { \"Mode\": \"PassThrough\" }, \"Version\": \"$LATEST\", \"CodeSha256\": \"5tT2qgzYUHoqwR616pZ2dpkn/0J1FrzJmlKidWaaCgk=\", \"FunctionName\": \"my-function\", \"VpcConfig\": { \"SubnetIds\": [], \"VpcId\": \"\", \"SecurityGroupIds\": [] }, \"MemorySize\": 128, \"RevisionId\": \"28f0fb31-5c5c-43d3-8955-03e76c5c1075\", \"CodeSize\": 304, \"FunctionArn\": \"arn:aws:lambda:us-west-2:123456789012:function:my-function\", \"Handler\": \"index.handler\", \"Role\": \"arn:aws:iam::123456789012:role/service-role/helloWorldPython-role-uy3l9qyq\", \"Timeout\": 3, \"LastModified\": \"2019-09-24T18:20:35.054+0000\", \"Runtime\": \"nodejs10.x\", \"Description\": \"\" } } Get function configuration aws lambda get-function-configuration \\ --function-name my-function:2 Output: { \"FunctionName\": \"my-function\", \"LastModified\": \"2019-09-26T20:28:40.438+0000\", \"RevisionId\": \"e52502d4-9320-4688-9cd6-152a6ab7490d\", \"MemorySize\": 256, \"Version\": \"2\", \"Role\": \"arn:aws:iam::123456789012:role/service-role/my-function-role-uy3l9qyq\", \"Timeout\": 3, \"Runtime\": \"nodejs10.x\", \"TracingConfig\": { \"Mode\": \"PassThrough\" }, \"CodeSha256\": \"5tT2qgzYUHaqwR716pZ2dpkn/0J1FrzJmlKidWoaCgk=\", \"Description\": \"\", \"VpcConfig\": { \"SubnetIds\": [], \"VpcId\": \"\", \"SecurityGroupIds\": [] }, \"CodeSize\": 304, \"FunctionArn\": \"arn:aws:lambda:us-west-2:123456789012:function:my-function:2\", \"Handler\": \"index.handler\" } Update function configuration aws lambda update-function-configuration \\ --function-name my-function \\ --memory-size 256 Invoke a function aws lambda invoke \\ --function-name my-function \\ --cli-binary-format raw-in-base64-out \\ --payload '{ \"name\": \"Bob\" }' \\ response.json Invoke a function aws lambda invoke \\ --function-name my-function \\ --invocation-type Event \\ --cli-binary-format raw-in-base64-out \\ --payload '{ \"name\": \"Bob\" }' \\ response.json Get reserved concurrent execution limit aws lambda get-function-concurrency \\ --function-name my-function Add reserved concurrent execution limit aws lambda put-function-concurrency \\ --function-name my-function \\ --reserved-concurrent-executions 100 Remove reserved concurrent execution limit aws lambda delete-function-concurrency \\ --function-name my-function Get provisioned concurrency configuration aws lambda get-provisioned-concurrency-config \\ --function-name my-function \\ --qualifier BLUE Add provisioned concurrency configuration aws lambda put-provisioned-concurrency-config \\ --function-name my-function \\ --qualifier BLUE \\ --provisioned-concurrent-executions 100 Delete provisioned concurrency configuration aws lambda delete-provisioned-concurrency-config \\ --function-name my-function \\ --qualifier GREEN Get Lambda limits and usage aws lambda get-account-settings Output: { \"AccountLimit\": { \"CodeSizeUnzipped\": 262144000, \"UnreservedConcurrentExecutions\": 1000, \"ConcurrentExecutions\": 1000, \"CodeSizeZipped\": 52428800, \"TotalCodeSize\": 80530636800 }, ","date":"2024-04-26","objectID":"/aws-cli-cheatsheet/:3:2","tags":["aws"],"title":"AWS CLI Cheatsheet","uri":"/aws-cli-cheatsheet/"},{"categories":["cheatsheets"],"content":"S3 Create a multipart upload aws s3api create-multipart-upload --bucket my-bucket --key 'multipart/01' Output: { \"Bucket\": \"my-bucket\", \"UploadId\": \"dfRtDYU0WWCCcH43C3WFbkRONycyCpTJJvxu2i5GYkZljF.Yxwh6XG7WfS2vC4to6HiV6Yjlx.cph0gtNBtJ8P3URCSbB7rjxI5iEwVDmgaXZOGgkk5nVTW16HOQ5l0R\", \"Key\": \"multipart/01\" } List active multipart uploads aws s3api list-multipart-uploads --bucket my-bucket List parts that have uploaded aws s3api list-parts --bucket my-bucket --key 'multipart/01' --upload-id dfRtDYU0WWCCcH43C3WFbkRONycyCpTJJvxu2i5GYkZljF.Yxwh6XG7WfS2vC4to6HiV6Yjlx.cph0gtNBtJ8P3URCSbB7rjxI5iEwVDmgaXZOGgkk5nVTW16HOQ5l0R Upload a part aws s3api upload-part \\ --bucket my-bucket \\ --key 'multipart/01' \\ --part-number 1 \\ --body part01 \\ --upload-id \"dfRtDYU0WWCCcH43C3WFbkRONycyCpTJJvxu2i5GYkZljF.Yxwh6XG7WfS2vC4to6HiV6Yjlx.cph0gtNBtJ8P3URCSbB7rjxI5iEwVDmgaXZOGgkk5nVTW16HOQ5l0R\" Complete a multipart upload aws s3api complete-multipart-upload \\ --multipart-upload file://mpustruct \\ --bucket my-bucket --key 'multipart/01' \\ --upload-id dfRtDYU0WWCCcH43C3WFbkRONycyCpTJJvxu2i5GYkZljF.Yxwh6XG7WfS2vC4to6HiV6Yjlx.cph0gtNBtJ8P3URCSbB7rjxI5iEwVDmgaXZOGgkk5nVTW16HOQ5l0R Abort a multipart upload aws s3api abort-multipart-upload \\ --bucket my-bucket \\ --key multipart/01 \\ --upload-id dfRtDYU0WWCCcH43C3WFbkRONycyCpTJJvxu2i5GYkZljF.Yxwh6XG7WfS2vC4to6HiV6Yjlx.cph0gtNBtJ8P3URCSbB7rjxI5iEwVDmgaXZOGgkk5nVTW16HOQ5l0R Copy an object from bucket-1 to bucket-2 aws s3api copy-object --copy-source bucket-1/test.txt --key test.txt --bucket bucket-2 Copy a file from S3 to S3 aws s3 cp s3://mybucket/test.txt s3://mybucket/test2.txt Copy a local file to S3 aws s3 cp test.txt s3://mybucket/test2.txt To add an expiry, use --expires with timestamp. For ex: --expires 2014-10-01T20:30:00Z Copy an S3 object to a local file aws s3 cp s3://mybucket/test.txt test2.txt Copy an S3 object from one bucket to another aws s3 cp s3://mybucket/test.txt s3://mybucket2/ Upload to an access point aws s3 cp mydoc.txt s3://arn:aws:s3:us-west-2:123456789012:accesspoint/myaccesspoint/mykey Download from an access point aws s3 cp s3://arn:aws:s3:us-west-2:123456789012:accesspoint/myaccesspoint/mykey mydoc.txt Recursively copy S3 objects to a local directory aws s3 cp s3://mybucket . --recursive Recursively copy local files to S3 aws s3 cp myDir s3://mybucket/ \\ --recursive \\ --exclude \"*.jpg\" Combine --exclude and --include options to copy only objects that match a pattern, excluding all others. --recursive to recursively include all files under a folder/key/prefix --acl acceptable values are private, public-read, public-read-write, authenticated-read, aws-exec-read, bucket-owner-read, bucket-owner-full-control and log-delivery-write Move a local file to bucket aws s3 mv test.txt s3://mybucket/test2.txt To move wih original name, use: aws s3 mv s3://mybucket/test.txt s3://mybucket2/ Move an object to local folder aws s3 mv s3://mybucket/test.txt test2.txt Move an object to another bucket aws s3 mv s3://mybucket/test.txt s3://mybucket/test2.txt Move file to an acess point aws s3 ls s3://arn:aws:s3:us-west-2:123456789012:accesspoint/myaccesspoint/ Move all objects in a bucket to local folder aws s3 mv s3://mybucket . --recursive Combine --exclude and --include options to copy only objects that match a pattern, excluding all others. --recursive to recursively include all files under a folder/key/prefix --acl acceptable values are private, public-read, public-read-write, authenticated-read, aws-exec-read, bucket-owner-read, bucket-owner-full-control and log-delivery-write Grant permissions for an S3 object aws s3 cp file.txt s3://mybucket/ \\ --grants read=uri=http://acs.amazonaws.com/groups/global/AllUsers full=id=79a59df900b949e55d96a1e698fbacedfd6e09d98eacf8f8d5218e7cd47ef2be Delete an object aws s3api delete-object --bucket my-bucket --key test.txt Delete object aws s3api delete-objects --bucket my-bucket --delete file://delete.json Contents of delete.json: { \"Objects\": [ { \"Key\": \"test1.txt\" }","date":"2024-04-26","objectID":"/aws-cli-cheatsheet/:3:3","tags":["aws"],"title":"AWS CLI Cheatsheet","uri":"/aws-cli-cheatsheet/"},{"categories":["cheatsheets"],"content":"SQS Delete a message aws sqs delete-message --queue-url https://sqs.us-east-1.amazonaws.com/80398EXAMPLE/MyQueue --receipt-handle AQEBRXTo...q2doVA== Get Queue attributes aws sqs get-queue-attributes --queue-url https://sqs.us-east-1.amazonaws.com/80398EXAMPLE/MyQueue --attribute-names All Output: { \"Attributes\": { \"ApproximateNumberOfMessagesNotVisible\": \"0\", \"RedrivePolicy\": \"{\\\"deadLetterTargetArn\\\":\\\"arn:aws:sqs:us-east-1:80398EXAMPLE:MyDeadLetterQueue\\\",\\\"maxReceiveCount\\\":1000}\", \"MessageRetentionPeriod\": \"345600\", \"ApproximateNumberOfMessagesDelayed\": \"0\", \"MaximumMessageSize\": \"262144\", \"CreatedTimestamp\": \"1442426968\", \"ApproximateNumberOfMessages\": \"0\", \"ReceiveMessageWaitTimeSeconds\": \"0\", \"DelaySeconds\": \"0\", \"VisibilityTimeout\": \"30\", \"LastModifiedTimestamp\": \"1442426968\", \"QueueArn\": \"arn:aws:sqs:us-east-1:80398EXAMPLE:MyNewQueue\" } } Get queue URL aws sqs get-queue-url --queue-name MyQueue List souce queues of a dead letter queue aws sqs list-dead-letter-source-queues --queue-url https://sqs.us-east-1.amazonaws.com/80398EXAMPLE/MyDeadLetterQueue List all queues aws sqs list-queues Use --queue-name-prefix to filter by a name starting with a specific value Delete all messages in a queue aws sqs purge-queue --queue-url https://sqs.us-east-1.amazonaws.com/80398EXAMPLE/MyNewQueue Send a message aws sqs send-message \\ --queue-url https://sqs.us-east-1.amazonaws.com/80398EXAMPLE/MyQueue \\ --message-body \"Information about the largest city in Any Region.\" --delay-seconds 10 --message-attributes file://send-message.json Contents of send-message.json: { \"City\": { \"DataType\": \"String\", \"StringValue\": \"Any City\" }, \"Greeting\": { \"DataType\": \"Binary\", \"BinaryValue\": \"Hello, World!\" }, \"Population\": { \"DataType\": \"Number\", \"StringValue\": \"1250800\" } } Send multiple messages aws sqs send-message-batch \\ --queue-url https://sqs.us-east-1.amazonaws.com/80398EXAMPLE/MyQueue --entries file://send-message-batch.json Contents of send-message-batch.json [ { \"Id\": \"FuelReport-0001-2015-09-16T140731Z\", \"MessageBody\": \"Fuel report for account 0001 on 2015-09-16 at 02:07:31 PM.\", \"DelaySeconds\": 10, \"MessageAttributes\": { \"SellerName\": { \"DataType\": \"String\", \"StringValue\": \"Example Store\" }, \"City\": { \"DataType\": \"String\", \"StringValue\": \"Any City\" }, \"Region\": { \"DataType\": \"String\", \"StringValue\": \"WA\" }, \"PostalCode\": { \"DataType\": \"String\", \"StringValue\": \"99065\" }, \"PricePerGallon\": { \"DataType\": \"Number\", \"StringValue\": \"1.99\" } } }, { \"Id\": \"FuelReport-0002-2015-09-16T140930Z\", \"MessageBody\": \"Fuel report for account 0002 on 2015-09-16 at 02:09:30 PM.\", \"DelaySeconds\": 10, \"MessageAttributes\": { \"SellerName\": { \"DataType\": \"String\", \"StringValue\": \"Example Fuels\" }, \"City\": { \"DataType\": \"String\", \"StringValue\": \"North Town\" }, \"Region\": { \"DataType\": \"String\", \"StringValue\": \"WA\" }, \"PostalCode\": { \"DataType\": \"String\", \"StringValue\": \"99123\" }, \"PricePerGallon\": { \"DataType\": \"Number\", \"StringValue\": \"1.87\" } } } ] Start message move task - redrive a DLQ aws sqs start-message-move-task \\ --source-arn arn:aws:sqs:us-west-2:80398EXAMPLE:MyQueue1 \\ --destination-arn arn:aws:sqs:us-west-2:80398EXAMPLE:MyQueue2 \\ --max-number-of-messages-per-second 50 Redrive messages from DLQ to the source queue (cannot redrive DLQs of lambda, SNS, etc, only a queue) Only standard queues support redrive. FIFO queues donβt support redrive Only one active message movement task is supported per queue at any given time List message move tasks aws sqs list-message-move-tasks \\ --source-arn arn:aws:sqs:us-west-2:80398EXAMPLE:MyQueue \\ --max-results 2 Cancel message move tasks aws sqs cancel-message-move-task --task-handle AQEB6nR4...HzlvZQ== ","date":"2024-04-26","objectID":"/aws-cli-cheatsheet/:3:4","tags":["aws"],"title":"AWS CLI Cheatsheet","uri":"/aws-cli-cheatsheet/"},{"categories":["cheatsheets"],"content":"Api Gateway Get API Gateway account settings aws apigateway get-account Output: { \"cloudwatchRoleArn\": \"arn:aws:iam::123412341234:role/APIGatewayToCloudWatchLogsRole\", \"throttleSettings\": { \"rateLimit\": 500.0, \"burstLimit\": 1000 } } List REST APIs aws apigateway get-rest-apis Test invoke the root resource in an API by making a GET request aws apigateway test-invoke-method --rest-api-id 1234123412 --resource-id avl5sg8fw8 --http-method GET --path-with-query-string '/' Test invoke a sub-resource in an API by making a GET request with a path parameter value aws apigateway test-invoke-method --rest-api-id 1234123412 --resource-id 3gapai --http-method GET --path-with-query-string '/pets/1' Send data to a WebSocket connection aws apigatewaymanagementapi post-to-connection \\ --connection-id L0SM9cOFvHcCIhw= \\ --data \"Hello from API Gateway!\" \\ --endpoint-url https://aabbccddee.execute-api.us-west-2.amazonaws.com/prod Get information about a WebSocket connection aws apigatewaymanagementapi get-connection \\ --connection-id L0SM9cOFvHcCIhw= \\ --endpoint-url https://aabbccddee.execute-api.us-west-2.amazonaws.com/prod Delete a WebSocket connection aws apigatewaymanagementapi delete-connection \\ --connection-id L0SM9cOFvHcCIhw= \\ --endpoint-url https://aabbccddee.execute-api.us-west-2.amazonaws.com/prod ","date":"2024-04-26","objectID":"/aws-cli-cheatsheet/:3:5","tags":["aws"],"title":"AWS CLI Cheatsheet","uri":"/aws-cli-cheatsheet/"},{"categories":["cheatsheets"],"content":"RDS Describe account attributes aws rds describe-account-attributes Execute a batch SQL statement over an array of parameters aws rds-data batch-execute-statement \\ --resource-arn \"arn:aws:rds:us-west-2:123456789012:cluster:mydbcluster\" \\ --database \"mydb\" \\ --secret-arn \"arn:aws:secretsmanager:us-west-2:123456789012:secret:mysecret\" \\ --sql \"insert into mytable values (:id, :val)\" \\ --parameter-sets \"[[{\\\"name\\\": \\\"id\\\", \\\"value\\\": {\\\"longValue\\\": 1}},{\\\"name\\\": \\\"val\\\", \\\"value\\\": {\\\"stringValue\\\": \\\"ValueOne\\\"}}], [{\\\"name\\\": \\\"id\\\", \\\"value\\\": {\\\"longValue\\\": 2}},{\\\"name\\\": \\\"val\\\", \\\"value\\\": {\\\"stringValue\\\": \\\"ValueTwo\\\"}}], [{\\\"name\\\": \\\"id\\\", \\\"value\\\": {\\\"longValue\\\": 3}},{\\\"name\\\": \\\"val\\\", \\\"value\\\": {\\\"stringValue\\\": \\\"ValueThree\\\"}}]]\" Begin a transaction aws rds-data begin-transaction \\ --resource-arn \"arn:aws:rds:us-west-2:123456789012:cluster:mydbcluster\" \\ --database \"mydb\" \\ --secret-arn \"arn:aws:secretsmanager:us-west-2:123456789012:secret:mysecret\" Output: { \"transactionId\": \"ABC1234567890xyz\" } Commit a SQL transaction aws rds-data commit-transaction \\ --resource-arn \"arn:aws:rds:us-west-2:123456789012:cluster:mydbcluster\" \\ --secret-arn \"arn:aws:secretsmanager:us-west-2:123456789012:secret:mysecret\" \\ --transaction-id \"ABC1234567890xyz\" Execute a SQL statement that is part of a transaction aws rds-data execute-statement \\ --resource-arn \"arn:aws:rds:us-west-2:123456789012:cluster:mydbcluster\" \\ --database \"mydb\" \\ --secret-arn \"arn:aws:secretsmanager:us-west-2:123456789012:secret:mysecret\" \\ --sql \"update mytable set quantity=5 where id=201\" \\ --transaction-id \"ABC1234567890xyz\" Execute a SQL statement with parameters aws rds-data execute-statement \\ --resource-arn \"arn:aws:rds:us-east-1:123456789012:cluster:mydbcluster\" \\ --database \"mydb\" \\ --secret-arn \"arn:aws:secretsmanager:us-east-1:123456789012:secret:mysecret\" \\ --sql \"insert into mytable values (:id, :val)\" \\ --parameters \"[{\\\"name\\\": \\\"id\\\", \\\"value\\\": {\\\"longValue\\\": 1}},{\\\"name\\\": \\\"val\\\", \\\"value\\\": {\\\"stringValue\\\": \\\"value1\\\"}}]\" Roll back a SQL transaction aws rds-data rollback-transaction \\ --resource-arn \"arn:aws:rds:us-west-2:123456789012:cluster:mydbcluster\" \\ --secret-arn \"arn:aws:secretsmanager:us-west-2:123456789012:secret:mysecret\" \\ --transaction-id \"ABC1234567890xyz\" ","date":"2024-04-26","objectID":"/aws-cli-cheatsheet/:3:6","tags":["aws"],"title":"AWS CLI Cheatsheet","uri":"/aws-cli-cheatsheet/"},{"categories":["cheatsheets"],"content":"References https://docs.aws.amazon.com/cli/latest/reference/ https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-getting-started.html https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-services.html ","date":"2024-04-26","objectID":"/aws-cli-cheatsheet/:4:0","tags":["aws"],"title":"AWS CLI Cheatsheet","uri":"/aws-cli-cheatsheet/"},{"categories":["cheatsheets"],"content":"Single line comment: -- comment Multiline comment: /* comments */ ","date":"2024-02-05","objectID":"/sql-cheatsheet/:0:0","tags":["SQL"],"title":"SQL Cheatsheet","uri":"/sql-cheatsheet/"},{"categories":["cheatsheets"],"content":"Data query Language (DQL) SELECT 'ID: ', id, col_1 + col_2, sqrt(col_2) FROM t1 -- precedence within WHERE: functions, comparisons, NOT, AND, OR WHERE col_1 \u003e 100 AND NOT MOD(col_2, 10) = 0 OR col_3 \u003c col_1 ORDER BY col_4 DESC, col_5; -- number of rows, number of not-null-values SELECT COUNT(*), COUNT(col_1) FROM t1; -- predefined functions SELECT COUNT(col_1), MAX(col_1), MIN(col_1), AVG(col_1), SUM(col_1) FROM t1; -- UNIQUE values only SELECT DISTINCT col_1 FROM t1; -- Only the combination of col_1 plus col_2 is unique SELECT DISTINCT col_1, col_2 FROM t1; ","date":"2024-02-05","objectID":"/sql-cheatsheet/:1:0","tags":["SQL"],"title":"SQL Cheatsheet","uri":"/sql-cheatsheet/"},{"categories":["cheatsheets"],"content":"Case Expression SELECT id, CASE contact_type WHEN 'fixed line' THEN 'Phone' WHEN 'mobile' THEN 'Phone' ELSE 'Not a telephone number' END AS 'contact_type', contact_value FROM contact; There are two short forms for special CASE expressions: COALESCE and NULLIF. COALESCE(x1,x2) is equivalent to CASE WHEN x1 IS NOT NULL THEN x1 ELSE x2 END NULLIF(x1, x2) is equivalent to CASE WHEN x1 = x2 THEN NULL ELSE x1 END ","date":"2024-02-05","objectID":"/sql-cheatsheet/:1:1","tags":["SQL"],"title":"SQL Cheatsheet","uri":"/sql-cheatsheet/"},{"categories":["cheatsheets"],"content":"Grouping SELECT product_group, count(*) AS cnt FROM sales WHERE region = 'west' -- additional restrictions are possible but not necessary GROUP BY product_group -- 'product_group' is the criterion which creates groups HAVING COUNT(*) \u003e 1000 -- restriction to groups with more than 1000 sales per group ORDER BY cnt; SELECT clause must have columns that are specified in the GROUP BY clause HAVING clause filters after the grouping is done and can have aggregate functions WHERE clause can’t have aggregate functions ","date":"2024-02-05","objectID":"/sql-cheatsheet/:1:2","tags":["SQL"],"title":"SQL Cheatsheet","uri":"/sql-cheatsheet/"},{"categories":["cheatsheets"],"content":"Joins Inner Join SELECT * FROM person p JOIN contact c ON p.id = c.person_id; Left Outer Join SELECT * FROM person p LEFT JOIN contact c ON p.id = c.person_id; Right Outer Join SELECT * FROM person p RIGHT JOIN contact c ON p.id = c.person_id; Full Outer Join SELECT * FROM person p FULL JOIN contact c ON p.id = c.person_id; Cartesian Product SELECT COUNT(*) FROM person p JOIN contact c; ","date":"2024-02-05","objectID":"/sql-cheatsheet/:1:3","tags":["SQL"],"title":"SQL Cheatsheet","uri":"/sql-cheatsheet/"},{"categories":["cheatsheets"],"content":"Subqueries SELECT isbn, title, price FROM Book WHERE price \u003c (SELECT AVG(price) FROM Book) ORDER BY title; Slower than joins Adds hierarchy execution that can can be useful (example: AVG above) Subquery can use values from outer query (also called correlated subquery) Derived table functionality allows the user to reference the subquery as a table SELECT b.isbn, b.title, b.price, sales.items_sold, sales.company_nm FROM Book b JOIN (SELECT SUM(Items_Sold) Items_Sold, Company_Nm, ISBN FROM Book_Sales GROUP BY Company_Nm, ISBN) sales -- derived table ON sales.isbn = b.isbn ","date":"2024-02-05","objectID":"/sql-cheatsheet/:1:4","tags":["SQL"],"title":"SQL Cheatsheet","uri":"/sql-cheatsheet/"},{"categories":["cheatsheets"],"content":"Set Operations Union SELECT firstname -- first SELECT command FROM person UNION -- push both intermediate results together to one result SELECT lastname -- second SELECT command FROM person; Intersect -- INTERSECT: resulting values must be in BOTH intermediate results SELECT firstname FROM person INTERSECT SELECT lastname FROM person; Except -- EXCEPT: resulting values must be in the first but not in the second intermediate result SELECT firstname FROM person EXCEPT SELECT lastname FROM person; ","date":"2024-02-05","objectID":"/sql-cheatsheet/:1:5","tags":["SQL"],"title":"SQL Cheatsheet","uri":"/sql-cheatsheet/"},{"categories":["cheatsheets"],"content":"Order of execution Clause Order of execution SELECT \u003ccolumns\u003e 5. FROM \u003ctable\u003e 1. WHERE \u003cpredicate on rows\u003e 2. GROUP BY \u003ccolumns\u003e 3. HAVING \u003cpredicate on groups\u003e 4. ORDER BY \u003ccolumns\u003e 6. OFFSET 7. FETCH FIRST 8. ","date":"2024-02-05","objectID":"/sql-cheatsheet/:1:6","tags":["SQL"],"title":"SQL Cheatsheet","uri":"/sql-cheatsheet/"},{"categories":["cheatsheets"],"content":"Operators Operator Description Example = Equal to Author = ‘Alcott’ \u003c\u003e Not equal to (many dialects also accept !=) Dept \u003c\u003e ‘Sales’ \u003e Greater than Hire_Date \u003e ‘2012-01-31’ \u003c Less than Bonus \u003c 50000.00 \u003e= Greater than or equal Dependents \u003e= 2 \u003c= Less than or equal Rate \u003c= 0.05 [NOT] BETWEEN Between an inclusive range. Cost BETWEEN 100.00 AND 500.00 [NOT] LIKE Begins with a character pattern, Contains a character pattern Full_Name LIKE ‘Will%’, Full_Name LIKE ‘%Will%’ [NOT] IN Equal to one of multiple possible values DeptCode IN (101, 103, 209) IS [NOT] NULL Compare to null (missing data) Address IS NOT NULL IS [NOT] TRUE, IS [NOT] FALSE Boolean truth value test PaidVacation IS TRUE IS NOT DISTINCT FROM Is equal to value or both are nulls (missing data) Debt IS NOT DISTINCT FROM - Receivables AS Used to change a column name when viewing results SELECT employee AS department1 ","date":"2024-02-05","objectID":"/sql-cheatsheet/:1:7","tags":["SQL"],"title":"SQL Cheatsheet","uri":"/sql-cheatsheet/"},{"categories":["cheatsheets"],"content":"Data Manipulation Language (DML) ","date":"2024-02-05","objectID":"/sql-cheatsheet/:2:0","tags":["SQL"],"title":"SQL Cheatsheet","uri":"/sql-cheatsheet/"},{"categories":["cheatsheets"],"content":"Transaction Control START TRANSACTION SAVE TRANSACTION COMMIT ROLLBACK ","date":"2024-02-05","objectID":"/sql-cheatsheet/:2:1","tags":["SQL"],"title":"SQL Cheatsheet","uri":"/sql-cheatsheet/"},{"categories":["cheatsheets"],"content":"Insert INSERT INTO t1 (id, col_1, col_2) VALUES (6, 46, 'abc'); INSERT INTO t1 (id, col_1, col_2) VALUES (7, 47, 'abc7'), (8, 48, 'abc8'), (9, 49, 'abc9'); INSERT INTO t1 (id, col_1, col_2) SELECT id, col_x, col_y FROM t2 WHERE col_y \u003e 100; COMMIT; INSERT INTO t1 (id, col_1, col_2) SELECT id, CASE WHEN col_x \u003c 40 THEN col_x + 10 ELSE col_x + 5 END, col_y FROM t2 WHERE col_y \u003e 100; ","date":"2024-02-05","objectID":"/sql-cheatsheet/:2:2","tags":["SQL"],"title":"SQL Cheatsheet","uri":"/sql-cheatsheet/"},{"categories":["cheatsheets"],"content":"Update UPDATE t1 SET col_1 = 'Jimmy Walker', col_2 = 4711 WHERE id = 5; UPDATE t1 SET col_2 = col_2 * 2 WHERE id = 5; UPDATE t1 SET col_2 = (SELECT max(id) FROM t1) WHERE id = 5; UPDATE t1 SET col_2 = (SELECT col_2 FROM t2 where t1.id = t2.id) WHERE id = 5; UPDATE article SET col_1 = 'topseller' WHERE id IN (SELECT article_id FROM sales GROUP BY article_id HAVING COUNT(*) \u003e 1000 ); ","date":"2024-02-05","objectID":"/sql-cheatsheet/:2:3","tags":["SQL"],"title":"SQL Cheatsheet","uri":"/sql-cheatsheet/"},{"categories":["cheatsheets"],"content":"Merge If the rows exist, they must use the UPDATE command, if not, the INSERT command. Also known as upsert. -- INSERT / UPDATE depending on any criterion, in this case: the two columns 'id' MERGE INTO hobby_shadow t -- the target table USING (SELECT id, hobbyname, remark FROM hobby WHERE id \u003c 8) s -- the source ON (t.id = s.id) -- the 'match criterion' WHEN MATCHED THEN UPDATE SET remark = concat(s.remark, ' Merge / Update') WHEN NOT MATCHED THEN INSERT (id, hobbyname, remark) VALUES (s.id, s.hobbyname, concat(s.remark, ' Merge / Insert')) ; ","date":"2024-02-05","objectID":"/sql-cheatsheet/:2:4","tags":["SQL"],"title":"SQL Cheatsheet","uri":"/sql-cheatsheet/"},{"categories":["cheatsheets"],"content":"Delete DELETE FROM t1 WHERE id = 5; DELETE FROM person_hobby WHERE person_id IN (SELECT id FROM person WHERE lastname = 'Goldstein' ); ","date":"2024-02-05","objectID":"/sql-cheatsheet/:2:5","tags":["SQL"],"title":"SQL Cheatsheet","uri":"/sql-cheatsheet/"},{"categories":["cheatsheets"],"content":"Truncate TRUNCATE TABLE t1; Deletes ALL rows (WHERE clause is not possible). The table structure remains. No trigger action will be launched Faster than DELETE ","date":"2024-02-05","objectID":"/sql-cheatsheet/:2:6","tags":["SQL"],"title":"SQL Cheatsheet","uri":"/sql-cheatsheet/"},{"categories":["cheatsheets"],"content":"Data Definition Language (DDL) ","date":"2024-02-05","objectID":"/sql-cheatsheet/:3:0","tags":["SQL"],"title":"SQL Cheatsheet","uri":"/sql-cheatsheet/"},{"categories":["cheatsheets"],"content":"Create a table CREATE TABLE table_name ( -- column name data type default nullable/constraint id DECIMAL PRIMARY KEY, col_1 VARCHAR(50) DEFAULT 'n/a' NOT NULL, col_2 CHAR(10), col_3 DECIMAL(10,2) DEFAULT 0.0, -- 8 digits before and 2 after the decimal. Signed. col_4 TIMESTAMP, col_5 INTEGER, col_6 BIGINT, CONSTRAINT example_pk PRIMARY KEY (id), CONSTRAINT example_uniq UNIQUE (col_2), CONSTRAINT example_fk FOREIGN KEY (col_1) REFERENCES table2_name(id), CONSTRAINT example_col_1_nn CHECK (col_1 IS NOT NULL), CONSTRAINT example_col_1_check CHECK (col_1 \u003e=0 AND col_1 \u003c 6), CONSTRAINT example_check_1 CHECK (LENGTH(col_2) \u003e 3), ); ","date":"2024-02-05","objectID":"/sql-cheatsheet/:3:1","tags":["SQL"],"title":"SQL Cheatsheet","uri":"/sql-cheatsheet/"},{"categories":["cheatsheets"],"content":"Alter Table Add a column with a column constraint ALTER TABLE t1 ADD COLUMN col_1 VARCHAR(100) CHECK (LENGTH(col_1) \u003e 5); Change column characteristic ALTER TABLE t1 ALTER COLUMN col_1 SET DATA TYPE NUMERIC; ALTER TABLE t1 ALTER COLUMN col_1 SET SET DEFAULT -1; ALTER TABLE t1 ALTER COLUMN col_1 SET NOT NULL; ALTER TABLE t1 ALTER COLUMN col_1 DROP NOT NULL; Drop a column ALTER TABLE t1 DROP COLUMN col_2; Add unique column constraint ALTER TABLE t1 ADD CONSTRAINT t1_col_1_uniq UNIQUE (col_1); Add foreign key constraint ALTER TABLE t1 ADD CONSTRAINT t1_col_2_fk FOREIGN KEY (col_2) REFERENCES person (id); Change a constraint ALTER TABLE t1 ALTER CONSTRAINT t1_col_1_unique UNIQUE (col_1); Drop a constraint ALTER TABLE t1 DROP CONSTRAINT t1_col_1_unique; ","date":"2024-02-05","objectID":"/sql-cheatsheet/:3:2","tags":["SQL"],"title":"SQL Cheatsheet","uri":"/sql-cheatsheet/"},{"categories":["cheatsheets"],"content":"Drop Table DROP TABLE t1; ","date":"2024-02-05","objectID":"/sql-cheatsheet/:3:3","tags":["SQL"],"title":"SQL Cheatsheet","uri":"/sql-cheatsheet/"},{"categories":["cheatsheets"],"content":"Data Control Language (DCL) GRANT SELECT, UPDATE ON example TO some_user, another_user; REVOKE SELECT, UPDATE ON example FROM some_user, another_user; References https://en.wikibooks.org/wiki/Structured_Query_Language https://en.wikipedia.org/wiki/SQL_syntax ","date":"2024-02-05","objectID":"/sql-cheatsheet/:4:0","tags":["SQL"],"title":"SQL Cheatsheet","uri":"/sql-cheatsheet/"},{"categories":["utilities","projects","calculator"],"content":"View full page demo ","date":"2023-12-09","objectID":"/potential-upside-calculator/:0:0","tags":["javascript"],"title":"Potential Upside Calculator","uri":"/potential-upside-calculator/"},{"categories":["notes"],"content":"SOLID is a set design principles in object-oriented context to make maintainable, testable and extendable software. ","date":"2023-05-06","objectID":"/solid-design-principles/:0:0","tags":["software engineering"],"title":"Solid Design Principles","uri":"/solid-design-principles/"},{"categories":["notes"],"content":"Single Responsibility A class should only have one responsibility. Furthermore, it should only have one reason to change. Benefits: Testing: A class with one responsibility will have far fewer test cases. Lower coupling: Less functionality in a single class will have fewer dependencies. Organization: Smaller, well-organized classes are easier to search than monolithic ones. ","date":"2023-05-06","objectID":"/solid-design-principles/:1:0","tags":["software engineering"],"title":"Solid Design Principles","uri":"/solid-design-principles/"},{"categories":["notes"],"content":"Example Bad A class representing a book: public class Book { private String name; private String author; private String text; //constructor, getters and setters void printTextToConsole() { // implementation } } Why bad? This code violates the single responsibility principle because it now has multiple responsibilities - to store book details and print text to the console. To fix this, create another class for printing text. Good public class BookPrinter { void printTextToConsole(String text){ // implementation } void printText(String text, PrintStream printStream){ // implementation } } ","date":"2023-05-06","objectID":"/solid-design-principles/:1:1","tags":["software engineering"],"title":"Solid Design Principles","uri":"/solid-design-principles/"},{"categories":["notes"],"content":"Open - Closed A class should be open for extension but closed for modification. When adding new functionality to classes, it should be open for extension but closed for modification. This prevents modifying existing code and causing potential new bugs in an otherwise working code. ","date":"2023-05-06","objectID":"/solid-design-principles/:2:0","tags":["software engineering"],"title":"Solid Design Principles","uri":"/solid-design-principles/"},{"categories":["notes"],"content":"Example Bad public class Example { public double Area(Object[] Shapes) { double area = 0; for (Object shape : Shapes) { if (shape.name == \"rectangle\") { Rectangle rectangle = (Rectangle) shape; area += rectangle.width*rectangle.height; } else { Circle circle = (Circle) shape; area += circle.radius*circle.radius*Math.PI; } return area; } } } Why bad? If a few more shapes have to be added, the code in the area method will have to be modified. To fix this and extend, not modify code, an area method can be added to each shape and used here. Good abstract class Shape { public abstract double getArea(); } class Rectangle extends Shape { private double width, height; @Override public double getArea() { return width*height; } } class Circle extends Shape { private double radius; @Override public double getArea() { return radius*radius*Math.PI; } } public class Example { public double Area(Object[] Shapes) { double area = 0; for (Object shape : Shapes) { area += shape.getArea(); } return area; } } } ","date":"2023-05-06","objectID":"/solid-design-principles/:2:1","tags":["software engineering"],"title":"Solid Design Principles","uri":"/solid-design-principles/"},{"categories":["notes"],"content":"Liskov Substitution Principle Child classes or subclasses must be substitutable for their parent classes or super classes. In other words, the child class must be able to replace the parent class. ","date":"2023-05-06","objectID":"/solid-design-principles/:3:0","tags":["software engineering"],"title":"Solid Design Principles","uri":"/solid-design-principles/"},{"categories":["notes"],"content":"Example Bad class Rectangle { public void setWidth(double width) { // implementation } public void setHeight(double height) { // implementation } public void getWidth() { // implementation } public void getHeight() { // implementation } } class Square extends Rectangle { public void setWidth(double width) { // set both h and w to w } public void setHeight(double height) { // set both h and w to h } public void getWidth() { // implementation } public void getHeight() { // implementation } } Why bad? Consider the following test code. If an object of a Square is supplied to the method below, the assertEquals will fail as the result will be 16, not 20. So, here the base class is not replaceable by its derived class. void test(Rectangle r) { r.setWidth(5); r.setHeight(4); assertEquals(5*4, r.getWidth()*r.getHeight()); } Good Don’t inherit the Rectangle class in the Square class. ","date":"2023-05-06","objectID":"/solid-design-principles/:3:1","tags":["software engineering"],"title":"Solid Design Principles","uri":"/solid-design-principles/"},{"categories":["notes"],"content":"Interface Segregation Principle Larger interfaces should be split into smaller ones. This ensures that implementing classes only needs to be concerned about the methods that are of interest to them. If there’s a fat interface, then any change in it would result in changes in all the implementing classes. ","date":"2023-05-06","objectID":"/solid-design-principles/:4:0","tags":["software engineering"],"title":"Solid Design Principles","uri":"/solid-design-principles/"},{"categories":["notes"],"content":"Example Bad abstract class Animal { abstract void feed(); abstract void groom(); } class Dog extends Animal { void feed() { // implementation } void groom() { // implementation } } class Tiger extends Animal { void feed() { // implementation } void groom() { // dummy implementation as a tiger can't be pet } } Why bad? A dummy implementation is provided to the Tiger class so that the compiler does not throw an error. A Tiger can’t be petted, so its implementation doesn’t actually do anything. Good abstract class Animal { abstract void feed(); } abstract class Pet extends Animal { abstract void groom(); } class Dog extends Pet { void feed() { // implementation } void groom() { // implementation } } class Tiger extends Animal { void feed() { // implementation } } ","date":"2023-05-06","objectID":"/solid-design-principles/:4:1","tags":["software engineering"],"title":"Solid Design Principles","uri":"/solid-design-principles/"},{"categories":["notes"],"content":"Dependency Inversion Depend upon abstractions (interfaces), not upon concrete classes or implementations. Because the abstraction does not depend on detail but the detail depends on abstraction, it decouples the code. Bad enum OutputDevice {PRINTER, DISK}; void copy(OutputDevice device) { int c = readKeyboard(); while (c != EOF) { if (device == PRINTER) writePrinter(c); else writeDisk(); c = readKeyboard(); } } Why bad? As the number of OutputDevice increases, the copy method will have to keep on changing. To fix this, create Reader and Writer interfaces. These will be dependencies of the copy method, copy method will not create these objects. rather this responsibility is inverted to the user. Good interface Reader { char read(); } interface Writer { void write(char c); } void copy(Reader r, Writer w) { char c = r.read(); while (c != EOF) { w.write(c); c = r.read(); } } ","date":"2023-05-06","objectID":"/solid-design-principles/:5:0","tags":["software engineering"],"title":"Solid Design Principles","uri":"/solid-design-principles/"},{"categories":["cheatsheets"],"content":" Info This post assumes prior knowledge of python and selenium 4 ","date":"2022-04-24","objectID":"/selenium-cheat-sheet/:0:0","tags":["python","automation","selenium","scripting"],"title":"Selenium Cheat Sheet","uri":"/selenium-cheat-sheet/"},{"categories":["cheatsheets"],"content":"Installation Selenium: pip install selenium Download the drivers, make sure that your browser, selenium and driver versions are compatible with each other. Chrome: https://chromedriver.chromium.org/downloads Firefox: https://github.com/mozilla/geckodriver/releases Edge: https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/ ","date":"2022-04-24","objectID":"/selenium-cheat-sheet/:1:0","tags":["python","automation","selenium","scripting"],"title":"Selenium Cheat Sheet","uri":"/selenium-cheat-sheet/"},{"categories":["cheatsheets"],"content":"Instantiate your driver ","date":"2022-04-24","objectID":"/selenium-cheat-sheet/:2:0","tags":["python","automation","selenium","scripting"],"title":"Selenium Cheat Sheet","uri":"/selenium-cheat-sheet/"},{"categories":["cheatsheets"],"content":"Chrome from selenium import webdriver driver = webdriver.Chrome(executable_path=\"C:/webdrivers/chromedriver.exe\") With custom options from selenium import webdriver from selenium.webdriver.chrome.options import Options options = Options() ## option to not show an open browser window options.add_argument(\"--headless\") driver = webdriver.Chrome(executable_path=\"C:/webdrivers/chromedriver.exe\", options=options) ","date":"2022-04-24","objectID":"/selenium-cheat-sheet/:2:1","tags":["python","automation","selenium","scripting"],"title":"Selenium Cheat Sheet","uri":"/selenium-cheat-sheet/"},{"categories":["cheatsheets"],"content":"Mozilla from selenium import webdriver driver = webdriver.Firefox(executable_path=\"C:/webdrivers/geckodriver.exe\") With custom options from selenium import webdriver from selenium.webdriver.firefox.options import Options options = Options() # option for firefox.exe location, if firefox is not installed in default location options.binary_location = \"C:/.../firefox.exe\" options.set_preference(\"browser.download.manager.showWhenStarting\", False) options.set_preference(\"browser.download.dir\",\"/Data\") driver = webdriver.Firefox(executable_path=\"C:/webdrivers/geckodriver.exe\", options=options) ","date":"2022-04-24","objectID":"/selenium-cheat-sheet/:2:2","tags":["python","automation","selenium","scripting"],"title":"Selenium Cheat Sheet","uri":"/selenium-cheat-sheet/"},{"categories":["cheatsheets"],"content":"Edge from selenium import webdriver driver = webdriver.Edge(executable_path=\"C:/webdrivers/msedgedriver.exe\") With custom options from selenium import webdriver from selenium.webdriver.edge import service options = webdriver.EdgeOptions() options.use_chromium = True options.add_argument(\"start-maximized\") # option for msegde.exe location, if edge is not installed in default location options.binary_location = r\"C:/../msedge.exe\" service = service.Service(\"C:/webdrivers/msedgedriver.exe\") driver = webdriver.Edge(service=service, options=options) ","date":"2022-04-24","objectID":"/selenium-cheat-sheet/:2:3","tags":["python","automation","selenium","scripting"],"title":"Selenium Cheat Sheet","uri":"/selenium-cheat-sheet/"},{"categories":["cheatsheets"],"content":"Open a website driver.get(\"https://google.com\") ","date":"2022-04-24","objectID":"/selenium-cheat-sheet/:3:0","tags":["python","automation","selenium","scripting"],"title":"Selenium Cheat Sheet","uri":"/selenium-cheat-sheet/"},{"categories":["cheatsheets"],"content":"Find an element from selenium.webdriver.common.by import By element = find_element(By.ID, \"ID\") element = find_element(By.NAME, \"NAME\") element = find_element(By.XPATH, \"XPATH\") element = find_element(By.LINK_TEXT, \"TEXT\") element = find_element(By.PARTIAL_LINK_TEXT, \"PARTIAL_TEXT\") element = find_element(By.TAG_NAME, \"TAG_NAME\") element = find_element(By.CLASS_NAME, \"CLASS_NAME\") element = find_element(By.CSS_SELECTOR, \"CSS_SELECTOR\") ","date":"2022-04-24","objectID":"/selenium-cheat-sheet/:4:0","tags":["python","automation","selenium","scripting"],"title":"Selenium Cheat Sheet","uri":"/selenium-cheat-sheet/"},{"categories":["cheatsheets"],"content":"Find multiple elements from selenium.webdriver.common.by import By elements = find_elements(By.ID, \"ID\") elements = find_elements(By.NAME, \"NAME\") elements = find_element(By.XPATH, \"XPATH\") elements = find_element(By.LINK_TEXT, \"TEXT\") elements = find_element(By.PARTIAL_LINK_TEXT, \"PARTIAL_TEXT\") elements = find_element(By.TAG_NAME, \"TAG_NAME\") elements = find_element(By.CLASS_NAME, \"CLASS_NAME\") elements = find_element(By.CSS_SELECTOR, \"CSS_SELECTOR\") ","date":"2022-04-24","objectID":"/selenium-cheat-sheet/:5:0","tags":["python","automation","selenium","scripting"],"title":"Selenium Cheat Sheet","uri":"/selenium-cheat-sheet/"},{"categories":["cheatsheets"],"content":"Get information from element element.text # get an attribute like href, class, value etc element.get_attribute(\"ATTRIBUTE\") # get property like text_length element.get_property(\"PROPERTY\") # is element visible to user element.is_displayed() element.is_enabled() element.is_selected() element.screenshot(\"/Screenshots/foo.png\") ","date":"2022-04-24","objectID":"/selenium-cheat-sheet/:6:0","tags":["python","automation","selenium","scripting"],"title":"Selenium Cheat Sheet","uri":"/selenium-cheat-sheet/"},{"categories":["cheatsheets"],"content":"Interactions ","date":"2022-04-24","objectID":"/selenium-cheat-sheet/:7:0","tags":["python","automation","selenium","scripting"],"title":"Selenium Cheat Sheet","uri":"/selenium-cheat-sheet/"},{"categories":["cheatsheets"],"content":"Button element.cick() ","date":"2022-04-24","objectID":"/selenium-cheat-sheet/:7:1","tags":["python","automation","selenium","scripting"],"title":"Selenium Cheat Sheet","uri":"/selenium-cheat-sheet/"},{"categories":["cheatsheets"],"content":"Text element.send_keys(\"lorem ipsum\") # press arrow key element.send_keys(\"lorem ipsum\", Keys.ARROW_DOWN) element.clear() List of all keys is at: https://selenium-python.readthedocs.io/api.html#module-selenium.webdriver.common.keys ","date":"2022-04-24","objectID":"/selenium-cheat-sheet/:7:2","tags":["python","automation","selenium","scripting"],"title":"Selenium Cheat Sheet","uri":"/selenium-cheat-sheet/"},{"categories":["cheatsheets"],"content":"Options from selenium.webdriver.support.ui import Select select = Select(driver.find_element(By.XPATH, \"XPATH\")) select.select_by_index(index) select.select_by_visible_text(\"text\") select.select_by_value(value) options = select.options # get all options select.all_selected_options # get all selected options select.deselect_all() # deselect all selected options ","date":"2022-04-24","objectID":"/selenium-cheat-sheet/:7:3","tags":["python","automation","selenium","scripting"],"title":"Selenium Cheat Sheet","uri":"/selenium-cheat-sheet/"},{"categories":["cheatsheets"],"content":"Submit a form element.submit() ","date":"2022-04-24","objectID":"/selenium-cheat-sheet/:8:0","tags":["python","automation","selenium","scripting"],"title":"Selenium Cheat Sheet","uri":"/selenium-cheat-sheet/"},{"categories":["cheatsheets"],"content":"Waits ","date":"2022-04-24","objectID":"/selenium-cheat-sheet/:9:0","tags":["python","automation","selenium","scripting"],"title":"Selenium Cheat Sheet","uri":"/selenium-cheat-sheet/"},{"categories":["cheatsheets"],"content":"Explicit waits Wait for some time until certain condition is true. In the example, Selenium will wait for a maximum of 10s, checking the condition every 500ms. TimeoutException is thrown if element is not found after 10s. from selenium.webdriver.common.by import By from selenium.webdriver.support.wait import WebDriverWait from selenium.webdriver.support import expected_conditions as EC try: element = WebDriverWait(driver, 10).until( EC.presence_of_element_located((By.ID, \"ID\")) ) finally: driver.quit() All supported expected conditions are at: https://selenium-python.readthedocs.io/api.html#module-selenium.webdriver.support.expected_conditions ","date":"2022-04-24","objectID":"/selenium-cheat-sheet/:9:1","tags":["python","automation","selenium","scripting"],"title":"Selenium Cheat Sheet","uri":"/selenium-cheat-sheet/"},{"categories":["cheatsheets"],"content":"Implicit waits Wait for some time before finding any element. This applies for any find, unless webdriver is created anew. Use this carefully, because it can slow down the script execution. driver.implicitly_wait(10) ","date":"2022-04-24","objectID":"/selenium-cheat-sheet/:9:2","tags":["python","automation","selenium","scripting"],"title":"Selenium Cheat Sheet","uri":"/selenium-cheat-sheet/"},{"categories":["cheatsheets"],"content":"Close driver.close() Reference https://selenium-python.readthedocs.io/ ","date":"2022-04-24","objectID":"/selenium-cheat-sheet/:10:0","tags":["python","automation","selenium","scripting"],"title":"Selenium Cheat Sheet","uri":"/selenium-cheat-sheet/"},{"categories":["cheatsheets"],"content":"Setup User name: git config --global user.name \"[firstname lastname]\" Email: git config --global user.email \"[valid-email]\" Color: git config --global color.ui auto ","date":"2022-01-12","objectID":"/git-cheat-sheet/:1:0","tags":["git"],"title":"Git Cheat Sheet","uri":"/git-cheat-sheet/"},{"categories":["cheatsheets"],"content":"Initialization and cloning Make your current folder a git repo: git init Clone a repo: git clone [url] ","date":"2022-01-12","objectID":"/git-cheat-sheet/:2:0","tags":["git"],"title":"Git Cheat Sheet","uri":"/git-cheat-sheet/"},{"categories":["cheatsheets"],"content":"Staging and commits Get status of staged, unstages and untracked files: git status Add files to staging: git add [file] Remove a file from staging: git reset [file] Remove a file from staging and remove all changes: git reset --hard [file] Differences in files that are modified but not staged: git diff Differences in files that are staged but not committed: git diff --staged Commit changes: git commit -m \"[message]\" Commit only specific portion of a file: git add -p [file] Note: Git will go into interactive mode and prompt options for actions on each hunk. Add current staged changes to the previous commit: git commit --amend Note: Avoid amending a commit after they’ve been pushed. Undo all changes of the latest commit: git revert HEAD Undo all changes of a specific commit: git revert [commit-sha] ","date":"2022-01-12","objectID":"/git-cheat-sheet/:3:0","tags":["git"],"title":"Git Cheat Sheet","uri":"/git-cheat-sheet/"},{"categories":["cheatsheets"],"content":"Branch and merge List all branches and highlight current branch: git branch Switch to another branch: git checkout [branch-name] Create a new branch and switch to it: git checkout -b [branch name] Delete a branch: git branch -d [branch-name] Merge another branch to current branch: git merge [branch-name] Rebase the current branch to the top of master: git rebase master ","date":"2022-01-12","objectID":"/git-cheat-sheet/:4:0","tags":["git"],"title":"Git Cheat Sheet","uri":"/git-cheat-sheet/"},{"categories":["cheatsheets"],"content":"Tags List all tags: git tag Create a tag for current commit: git tag [tag-name] Create a tag for specific commit: git tag [tag-name] [commit-sha] Delete a tag: git tag -d [tag-name] ","date":"2022-01-12","objectID":"/git-cheat-sheet/:5:0","tags":["git"],"title":"Git Cheat Sheet","uri":"/git-cheat-sheet/"},{"categories":["cheatsheets"],"content":"Inspect changes Commit history of current branch: git log Show commits that changed a file: git log --follow [file] Show commit history as a graph: git log --graph --oneline ","date":"2022-01-12","objectID":"/git-cheat-sheet/:6:0","tags":["git"],"title":"Git Cheat Sheet","uri":"/git-cheat-sheet/"},{"categories":["cheatsheets"],"content":"Interacting with remote repo Add a git URL as remote: git remote add origin [url] Get all changes from remote branch: git pull Send all local changes to remote branch: git push Merge a remote branch to current: git merge origin\\[branch-name] ","date":"2022-01-12","objectID":"/git-cheat-sheet/:7:0","tags":["git"],"title":"Git Cheat Sheet","uri":"/git-cheat-sheet/"},{"categories":["cheatsheets"],"content":"Temporary commits Save all changes: git stash Restore changes from stash: git stash pop Discard the top of stash: git stash drop ","date":"2022-01-12","objectID":"/git-cheat-sheet/:8:0","tags":["git"],"title":"Git Cheat Sheet","uri":"/git-cheat-sheet/"},{"categories":["projects"],"content":"From May 1st, the government of India has opened several vaccination centers for people aged between 18 to 45. The vaccines are scarce and logging into Cowin app to check status is cumbersome due to frequent timeouts. The government has also made a public API to access vaccine related information like finding availability and downloading vaccination certificates. Using this, I have made a dashboard that makes it easy to find vaccine availability by district or pincode. Info It can only view vaccine availability. The actual booking needs to be done by the Cowin app ","date":"2021-05-15","objectID":"/covid-india-vaccine-appointment-availability/:0:0","tags":["javascript","web-development","python","angular"],"title":"Covid Vaccine Availability Dashboard","uri":"/covid-india-vaccine-appointment-availability/"},{"categories":["projects"],"content":"Dashboard Demo This dashboard is made with Angular web framework and Angular Material for components. View full page demo | View repo on github ","date":"2021-05-15","objectID":"/covid-india-vaccine-appointment-availability/:1:0","tags":["javascript","web-development","python","angular"],"title":"Covid Vaccine Availability Dashboard","uri":"/covid-india-vaccine-appointment-availability/"},{"categories":["projects"],"content":"Cowin APIs The APIs have the general pattern: BASE_URL + PATH + PARAMETERS where BASE_URL is cdn-api.co-vin.in/api/v2/appointment/sessions/public/ PATH QUERY PARAMETERS EXAMPLE findByDistrict district_id \u0026 date cdn-api.co-vin.in/api/v2/appointment/sessions/public/findByDistrict?district_id=365\u0026date=25-05-2021   findByPin pincode \u0026 date cdn-api.co-vin.in/api/v2/appointment/sessions/public/findByPin?pincode=440010\u0026date=25-05-2021   calendarByDistrict district_id \u0026 date cdn-api.co-vin.in/api/v2/appointment/sessions/public/calendarByDistrict?district_id=365\u0026date=25-05-2021   calendarByPin pincode \u0026 date cdn-api.co-vin.in/api/v2/appointment/sessions/public/calendarByPin?pincode=440010\u0026date=25-05-2021   For finding list of states and districts with their ids use BASE_URL as cdn-api.co-vin.in/api/v2/admin/location/ PATH PATH PARAMETERS EXAMPLE states None cdn-api.co-vin.in/api/v2/admin/location/states   districts state_id cdn-api.co-vin.in/api/v2/admin/location/districts/21   Tip If you get HTTP 403, then add a User-Agent header with value “Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36” These APIs can be accessed directly through a browser, REST clients like Postman, or any programming language. ","date":"2021-05-15","objectID":"/covid-india-vaccine-appointment-availability/:2:0","tags":["javascript","web-development","python","angular"],"title":"Covid Vaccine Availability Dashboard","uri":"/covid-india-vaccine-appointment-availability/"},{"categories":["projects"],"content":"Python Requests is one of the python libraries for making HTTP calls, with steps being as simple as: Import library: import requests Make the GET call response = requests.get(\"https://cdn-api.co-vin.in/api/v2/admin/location/states\") Check the status (200 = successful) print(response.status_code) Show the response print(response.json()) import requests import json # Appointment availibility by district and date (18+) url = \"https://cdn-api.co-vin.in/api/v2/appointment/sessions/public/findByDistrict\" params = {\"district_id\": \"365\", \"date\": \"25-05-2021\"} response = requests.get(url, params=params) print(\"HTTP \", response.status_code) data = response.json() for session in data[\"sessions\"]: if session[\"min_age_limit\"] == 18: print(json.dumps(session, indent=2)) # Appointment availibility by district for (18+) for next 7 days url = \"https://cdn-api.co-vin.in/api/v2/appointment/sessions/public/calendarByDistrict\" params = {\"district_id\": \"365\", \"date\": \"25-05-2021\"} response = requests.get(url, params=params) print(\"HTTP \", response.status_code) data = response.json() for center in data[\"centers\"]: for session in center[\"sessions\"]: if session[\"min_age_limit\"] == 18 and session[\"vaccine\"]==\"COVISHIELD\" and session[\"available_capacity\"] \u003e 0: print(json.dumps(session, indent=2)) ","date":"2021-05-15","objectID":"/covid-india-vaccine-appointment-availability/:2:1","tags":["javascript","web-development","python","angular"],"title":"Covid Vaccine Availability Dashboard","uri":"/covid-india-vaccine-appointment-availability/"},{"categories":["projects"],"content":"JavaScript XMLHttpRequest is a built-in object in JavaScript that can make HTTP calls in simple steps: Instantiate the object var request = new XMLHttpRequest() Prepare the GET call request.open('GET', 'https://cdn-api.co-vin.in/api/v2/appointment/sessions/public/findByDistrict?district_id=365\u0026date=25-05-2021') Define a function to do something when the response is received request.onload = function () { console.log(request.status); console.log(this.response); } Make the GET call request.send() // Appointment availibility by date and district var request = new XMLHttpRequest(); request.open('GET', 'https://cdn-api.co-vin.in/api/v2/appointment/sessions/public/findByDistrict?district_id=365\u0026date=25-05-2021'); request.onload = function () { console.log(request.status); console.log(this.response); } request.send() ","date":"2021-05-15","objectID":"/covid-india-vaccine-appointment-availability/:2:2","tags":["javascript","web-development","python","angular"],"title":"Covid Vaccine Availability Dashboard","uri":"/covid-india-vaccine-appointment-availability/"},{"categories":["projects"],"content":"References Cowin API documentation by GoI Making HTTP requests in Python Making HTTP requests in JS (or TS) Getting started with Angular Getting started with Angular Material ","date":"2021-05-15","objectID":"/covid-india-vaccine-appointment-availability/:3:0","tags":["javascript","web-development","python","angular"],"title":"Covid Vaccine Availability Dashboard","uri":"/covid-india-vaccine-appointment-availability/"},{"categories":[],"content":"Hi! I am Pratyaksha Jha. I am a software developer and a geek. I am passionate about learning and building. This is my blog. I write about challenging concepts, building usable software, code I often re-use. I also host some tiny utilities and my notes here. I would love to hear your feedback and suggestions. Feel free to reach out at hello@pratyakshajha.me! _  Pratyaksha means that which is before one’s eyes  Tools Java, Python, AWS  Myer-Briggs INTJ-A  Currently Reading Ram: Scion of Ikshvaku  Obsessively Listening Pasoori - Ali Sethi x Shae Gill Spotify Youtube ","date":"2020-07-26","objectID":"/about/:0:0","tags":[],"title":"About Me","uri":"/about/"}]